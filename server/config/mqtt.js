require('dotenv').config();
const mqtt = require('mqtt');
const { EventEmitter } = require('events'); // Import EventEmitter
const Device = require('../models/Device');

let global_message = ''; // Declare global_message

// Create an EventEmitter instance
const mqttEvents = new EventEmitter();

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è MQTT –∫–ª—ñ—î–Ω—Ç–∞
const mqttOptions = {
  username: process.env.MQTT_USERNAME,
  password: process.env.MQTT_PASSWORD,
  clientId: `smart-bin-server-${Math.random().toString(16).substring(2, 8)}`,
  clean: true,
  reconnectPeriod: 5000,
  port: 8883,
};

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è MQTT –∫–ª—ñ—î–Ω—Ç–∞
const mqttClient = mqtt.connect(process.env.MQTT_BROKER_URL, mqttOptions);

// –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π MQTT
mqttClient.on('connect', () => {
  console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MQTT –±—Ä–æ–∫–µ—Ä–∞ (HiveMQ)');
  
  // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–µ–º–∏ fill_level —Ç–∞ detecting
  mqttClient.subscribe('fill_level', { qos: 0 });
  mqttClient.subscribe('detecting', { qos: 0 });
  
  console.log('‚úÖ –ü—ñ–¥–ø–∏—Å–∞–Ω–æ –Ω–∞ —Ç–µ–º–∏ fill_level —Ç–∞ detecting');
});

mqttClient.on('message', async (topic, message) => {
  console.log(`üì© –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–µ–º–∏ ${topic}: ${message.toString()}`);
  global_message = message.toString(); // Update global_message

  // Emit an event with the updated global_message
  mqttEvents.emit('messageReceived', { topic, payload: message.toString() });
  try {
    // Handle the message (existing logic)
    const topicParts = topic.split('/');
    if (topicParts.length < 3) return;
    
    const serialNumber = topicParts[1];
    const messageType = topicParts[2];
    
    const device = await Device.findOne({ serialNumber });
    if (!device) {
      console.error(`‚ùå –ü—Ä–∏—Å—Ç—Ä—ñ–π –∑ —Å–µ—Ä—ñ–π–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º ${serialNumber} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö`);
      return;
    }
    
    device.lastActivity = new Date();
    device.status = 'online';
    
    switch (messageType) {
      case 'fill_level':
        const fillLevel = parseInt(message.toString(), 10);
        if (!isNaN(fillLevel) && fillLevel >= 0 && fillLevel <= 100) {
          await device.updateFillLevel(fillLevel);
          console.log(`‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ —Ä—ñ–≤–µ–Ω—å –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –¥–ª—è –ø—Ä–∏—Å—Ç—Ä–æ—é ${serialNumber}: ${fillLevel}%`);
        } else {
          console.error(`‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è: ${message.toString()}`);
        }
        break;
      
      case 'detecting':
        const isDetected = message.toString().toLowerCase() === 'true';
        console.log(`üìä –ü—Ä–∏—Å—Ç—Ä—ñ–π ${serialNumber} ${isDetected ? '–≤–∏—è–≤–∏–≤' : '–Ω–µ –≤–∏—è–≤–∏–≤'} –æ–±'—î–∫—Ç –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ 1–º`);
        await device.save();
        break;
      
      default:
        console.log(`–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${messageType}`);
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ MQTT –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
  }
});

mqttClient.on('error', (error) => {
  console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ MQTT –∑\'—î–¥–Ω–∞–Ω–Ω—è:', error);
});

mqttClient.on('offline', () => {
  console.log('üîå MQTT –∫–ª—ñ—î–Ω—Ç –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤—ñ–¥ –º–µ—Ä–µ–∂—ñ');
});

mqttClient.on('reconnect', () => {
  console.log('üîÑ –°–ø—Ä–æ–±–∞ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MQTT –±—Ä–æ–∫–µ—Ä–∞...');
});

// Export mqttClient, mqttEvents, and a getter for global_message
module.exports = {
  mqttClient,
  mqttEvents, // Export the EventEmitter instance
};