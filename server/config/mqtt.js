require('dotenv').config();
const mqtt = require('mqtt');
const Device = require('../models/Device');

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è MQTT –∫–ª—ñ—î–Ω—Ç–∞
const mqttOptions = {
  username: process.env.MQTT_USERNAME,
  password: process.env.MQTT_PASSWORD,
  clientId: `smart-bin-server-${Math.random().toString(16).substring(2, 8)}`,
  clean: true,
  reconnectPeriod: 5000,
  port: 8883,
};

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è MQTT –∫–ª—ñ—î–Ω—Ç–∞
const mqttClient = mqtt.connect(process.env.MQTT_BROKER_URL, mqttOptions);

// –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π MQTT
mqttClient.on('connect', () => {
  console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MQTT –±—Ä–æ–∫–µ—Ä–∞ (HiveMQ)');
  
  // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–µ–º–∏ fill_level —Ç–∞ detecting
  mqttClient.subscribe('fill_level', { qos: 0 });
  mqttClient.subscribe('detecting', { qos: 0 });
  
  console.log('‚úÖ –ü—ñ–¥–ø–∏—Å–∞–Ω–æ –Ω–∞ —Ç–µ–º–∏ fill_level —Ç–∞ detecting');
});

mqttClient.on('message', async (topic, message) => {
  console.log(`üì© –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–µ–º–∏ ${topic}: ${message.toString()}`);
  
  try {
    // –ü–∞—Ä—Å–∏–º–æ ID –ø—Ä–∏—Å—Ç—Ä–æ—é –∑ —Ç–æ–ø—ñ–∫—É (—Ñ–æ—Ä–º–∞—Ç: smart-bin/{serialNumber}/...)
    const topicParts = topic.split('/');
    if (topicParts.length < 3) return;
    
    const serialNumber = topicParts[1];
    const messageType = topicParts[2];
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å—Ç—Ä—ñ–π –∑–∞ —Å–µ—Ä—ñ–π–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º
    const device = await Device.findOne({ serialNumber });
    
    if (!device) {
      console.error(`‚ùå –ü—Ä–∏—Å—Ç—Ä—ñ–π –∑ —Å–µ—Ä—ñ–π–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º ${serialNumber} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö`);
      return;
    }
    
    device.lastActivity = new Date();
    device.status = 'online';
    
    switch (messageType) {
      case 'fill_level':
        const fillLevel = parseInt(message.toString(), 10);
        
        if (!isNaN(fillLevel) && fillLevel >= 0 && fillLevel <= 100) {
          await device.updateFillLevel(fillLevel);
          console.log(`‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ —Ä—ñ–≤–µ–Ω—å –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –¥–ª—è –ø—Ä–∏—Å—Ç—Ä–æ—é ${serialNumber}: ${fillLevel}%`);
        } else {
          console.error(`‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è: ${message.toString()}`);
        }
        break;
      
      case 'detecting':
        // –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–∏—è–≤–ª–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞
        const isDetected = message.toString().toLowerCase() === 'true';
        
        // –ú–æ–∂–Ω–∞ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∏—è–≤–ª–µ–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –∞–±–æ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ —ñ–Ω—à—ñ –¥—ñ—ó
        console.log(`üìä –ü—Ä–∏—Å—Ç—Ä—ñ–π ${serialNumber} ${isDetected ? '–≤–∏—è–≤–∏–≤' : '–Ω–µ –≤–∏—è–≤–∏–≤'} –æ–±'—î–∫—Ç –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ 1–º`);
        
        // –¢—É—Ç –º–æ–∂–Ω–∞ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—É –ª–æ–≥—ñ–∫—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        // –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ –æ–±'—î–∫—Ç –≤–∏—è–≤–ª–µ–Ω–æ –±–ª–∏–∑—å–∫–æ –¥–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ–≥–æ —Å–º—ñ—Ç–Ω–∏–∫–∞,
        // –º–æ–∂–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ—Å—Ç—å –æ—á–∏—â–µ–Ω–Ω—è
        
        await device.save();
        break;
        
      default:
        console.log(`–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${messageType}`);
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ MQTT –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
  }
});

mqttClient.on('error', (error) => {
  console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ MQTT –∑\'—î–¥–Ω–∞–Ω–Ω—è:', error);
});

mqttClient.on('offline', () => {
  console.log('üîå MQTT –∫–ª—ñ—î–Ω—Ç –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤—ñ–¥ –º–µ—Ä–µ–∂—ñ');
});

mqttClient.on('reconnect', () => {
  console.log('üîÑ –°–ø—Ä–æ–±–∞ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MQTT –±—Ä–æ–∫–µ—Ä–∞...');
});

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –∫–ª—ñ—î–Ω—Ç —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó
module.exports = {
  mqttClient
};